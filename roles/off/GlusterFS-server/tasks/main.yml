---
- name: Чтение версии установленного ПО
  shell: cat /etc/software.conf | grep GlusterFS-server
  register: version
  ignore_errors: yes

- name: Останановка гластер сервера
  service:
    name: "glusterfs-server"
    state: stopped
  ignore_errors: yes
  when: version.stdout != relis

- name: umount GlusterFS
  mount:
    path: "/opt/GlusterFS"
    state: unmounted

- name: umount /mnt/GlusterFS
  mount:
    path: "/mnt/GlusterFS/{{ item }}"
    state: unmounted
  with_items:
   - "{{ disks }}"
  ignore_errors: yes

- name: Удаление конфигурации
  file:
    path: /var/lib/glusterd
    state: absent
  ignore_errors: yes
  when: version.stdout != relis

- name: Удаление дисков из fstab
  mount:
    path: "/mnt/{{ item }}"
    state: unmounted
  with_items: "{{ disks }}"
  ignore_errors: yes
  when: version.stdout != relis

- name: Установка пакетов распределенной файловой системы
  apt:
    name:
    - glusterfs-server
    - gparted
    state: latest
    update_cache: yes
  when: version.stdout != relis

- name: Создание папок для развертывания glusterfs
  file:
    path: "/mnt/GlusterFS"
    state: directory
  when: version.stdout != relis

- name: Создание папок для развертывания glusterfs
  file:
    path: "/mnt/GlusterFS/{{ item }}"
    state: directory
  with_items:
    - "{{ disks }}"
  when: version.stdout != relis

- name: Удаление разделов на физических дисках
  parted:
    device: "/dev/{{ item }}"
    number: 2
    state: absent
  with_items: 
    - "{{ disks }}"
  when: version.stdout != relis

- name: Удаление разделов на физических дисках
  parted:
    device: "/dev/{{ item }}"
    number: 1
    state: absent
  with_items: 
    - "{{ disks }}"
  when: version.stdout != relis

- name: Создание разделов на физических дисках
  parted:
    device: "/dev/{{ item }}"
    number: 1
    part_type: primary
    state: present
  with_items:
    - "{{ disks }}"
  when: version.stdout != relis

- name: Форматирование разделов на физических дисках
  filesystem:
    fstype: "ext4"
    dev: "/dev/{{ item }}"
    opts: -E nodiscard
    force: yes
  with_items:
    - "{{ disks }}"
  when: version.stdout != relis

- name: Добавление дисков в fstab и их монтирование
  mount:
    src: "/dev/{{ item }}"
    path: "/mnt/GlusterFS/{{ item }}"
    fstype: ext4
    opts: rw,auto,errors=continue
    state: mounted
  with_items:
    - "{{ disks }}"

- name: Поменяем права доступа к SHD
  shell: |
         chown -R root:root /mnt/GlusterFS/{{ item }}
         chmod -R 4777 /mnt/GlusterFS/{{ item }}
  with_items:
    - "{{ disks }}"
  ignore_errors: yes
  when: version.stdout != relis

- name: Запуск гластер сервер
  service:
    name: glusterfs-server
    enabled: yes
    state: restarted
  when: version.stdout != relis

- name: add gluster peer
  gluster_peer:
    state: present
    nodes: "{{hostvars[item].ansible_ssh_host}}"
    force: true
  loop: "{{query('inventory_hostnames',  groups['gluster_slave']) }}"
  when: inventory_hostname in "{{ groups['gluster_master'] }}" and version.stdout != relis

- name: create gluster volume
  gluster_volume:
    state: present
    name: GlusterFS
    replicas: 2
    bricks: "/mnt/GlusterFS/{{disks|join(',/mnt/GlusterFS/')}}"
    rebalance: yes
    start_on_create: yes
    cluster: "{{groups['GFS']|join(',')}}"
    force: yes
    options:
      { performance.cache-size: 128MB,
        write-behind: 'off',
        quick-read: 'on'
      }
  when: inventory_hostname in "{{groups['gluster_master']}}" and version.stdout != relis

- name: Добавление GlusterFS в fstab и их монтирование
  mount:
    src: "localhost:/GlusterFS"
    path: "/opt/GlusterFS"
    fstype: glusterfs
    opts: rw,auto,x-systemd.automount,x-systemd.mount-timeout=30,_netdev
    state: mounted
  when: version.stdout != relis

- name: Запишем версию ПО если ее не разу не было (Install)
  become: true
  shell: "echo '{{ relis }}' >> /etc/software.conf"
  when: version.stdout == ""
  ignore_errors: yes

- name: Запишем новую версию ПО (Update)
  become: true
  shell: "sed -i 's/{{version.stdout}}/{{ relis }}/g' /etc/software.conf"
  when: version.stdout != relis
  ignore_errors: yes

