global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: {{ k8s.rwo_sc }}
kubeVersion: ""
nameOverride: ""
fullnameOverride: "kibana"
commonAnnotations: {}
commonLabels: {}
extraDeploy: []
clusterDomain: {{ domain }}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
image:
  registry: docker.io
  repository: bitnami/kibana
  tag: 8.5.3-debian-11-r9
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
replicaCount: 1
updateStrategy:
  type: RollingUpdate
schedulerName: ""
priorityClassName: ""
terminationGracePeriodSeconds: ""
topologySpreadConstraints: []
hostAliases: []
plugins:
  - https://github.com/pjhampton/kibana-prometheus-exporter/releases/download/8.5.3/kibanaPrometheusExporter-8.5.3.zip
savedObjects:
  urls: []
  configmap: ""
extraConfiguration: {}
configurationCM: ""
command: []
args: []
lifecycleHooks: {}
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumes: []
extraVolumeMounts: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r69
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources: {}
persistence:
  enabled: true
  storageClass: {{ k8s.rwo_sc }}
  existingClaim: ""
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  annotations: {}
  subPath: ""
  selector: {}
  dataSource: {}
startupProbe:
  enabled: false
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
customStartupProbe: {}
customLivenessProbe: {}
customReadinessProbe: {}
forceInitScripts: false
initScriptsCM: ""
initScriptsSecret: ""
service:
  ports:
    http: 5601
  type: ClusterIP
  nodePorts:
    http: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  labels: {}
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}
ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: kibana.{{ domain }}
  path: /
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  ingressClassName: "nginx"
  extraRules: []
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}
containerPorts:
  http: 5601
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
resources:
  limits: {}
  requests: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
podAnnotations: {}
podLabels: {}
sidecars: []
initContainers: []
configuration:
  server:
    basePath: ""
    rewriteBasePath: false
metrics:
  enabled: true
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "80"
      prometheus.io/path: "_prometheus/metrics"
  serviceMonitor:
    enabled: true
    namespace: ""
    jobLabel: ""
    interval: "5s"
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
    selector: {}
    labels:
      release: prometheus
    honorLabels: false
tls:
  enabled: false
  autoGenerated: false
  existingSecret: ""
  usePemCerts: false
  keyPassword: ""
  keystorePassword: ""
  passwordsSecret: ""
elasticsearch:
  hosts:
    - elasticsearch
  port: "9200"
  security:
    auth:
      enabled: false
      kibanaPassword: ""
      existingSecret: ""
      createSystemUser: false
      elasticsearchPasswordSecret: ""
    tls:
      enabled: false
      verificationMode: "full"
      existingSecret: ""
      usePemCerts: false
      truststorePassword: ""
      passwordsSecret: ""
