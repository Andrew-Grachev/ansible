---

- name: 0.4.1 | Проверка 'NetworkManager'
  command: systemctl is-active NetworkManager
  ignore_errors: yes
  register: nm_active

- name: 0.4.1 | Проверка 'network'
  stat:
    path: /etc/network/interfaces
  register: ifupdown_exists

# NetworkManager: {{ nm_active.stdout == 'active' }}
# ifupdown: {{ ifupdown_exists.stat.exists }}

- name: 0.4.1 | Получить имя активного интерфейса
  shell: |
    ip -o -4 addr show | grep "{{ hostvars[inventory_hostname].ansible_ssh_host }}" | awk '{print $2}'  
  register: device_name

- name: 0.4.1 | Проверка настройки интерфейса '{{ device_name.stdout }}'
  stat:
    path: '/etc/network/interfaces.d/{{ device_name.stdout }}'
  register: eth_config_exists
  when:
    - nm_active.stdout == 'inactive' # NetworkManager не активен
    - ifupdown_exists.stat.exists    # networking есть





# - name: Получить список сетевых интерфейсов
  # shell: |
    # ip link show | grep BROADCAST | awk '{print $2}' | sed 's/.$//'
  # register: device_list

# - name: Создание массива сетевых интерфейсов
  # set_fact:
    # interfaces: "{{ device_list.stdout_lines | list }}"

# - name: Получение количества элементов в списке интерфейсов
  # set_fact:
    # interfaces_length: "{{ interfaces | length }}"

# - name: Чтение статуса конфигурации интерфейса '{{ interfaces[0] }}'
  # shell: nmcli connection show {{ interfaces[0] }} | grep '{{ domain }}'
  # register: eth0_status
  # ignore_errors: yes

# - name: Чтение статуса конфигурации интерфейса 'bond0'
  # shell: nmcli connection show bond0 | grep '{{ domain }}'
  # register: bond0_status
  # ignore_errors: yes

# - name: Чтение '/etc/network/interfaces'
  # shell: |
    # cat /etc/network/interfaces | grep {{ domain }}
  # register: interfaces_status
  # ignore_errors: yes













# Создание интерфейсов в 'Network'
- name: 0.4.1 | Конфигурирование активного интерфейса
  block:

    - name: 0.4.1 | Создание файла '/etc/network/interfaces'
      copy:
        dest: '/etc/network/interfaces'
        content: |
          # Создано Ansible
          source /etc/network/interfaces.d/*
          auto lo
          iface lo inet loopback

    - name: 0.4.1 | Создание файла '/etc/network/interfaces.d/{{ device_name.stdout }}'
      copy:
        dest: '/etc/network/interfaces.d/{{ device_name.stdout }}'
        content: |
          # Создано Ansible
          auto {{ device_name.stdout }}
          iface {{ device_name.stdout }} inet static
            address {{ hostvars[inventory_hostname].ansible_ssh_host }}/{{ Net.network.split("/")[1] }}
            gateway {{ Net.gateway }}
          {% for dns in Net.bind %}
            dns-nameservers {{ dns }}
          {% endfor %}
            dns-search {{ domain }}

    - name: 0.4.1 | Создание файла '/etc/resolv.conf'
      copy:
        dest: '/etc/resolv.conf'
        content: |
          # Создано Ansible
          {% for dns in Net.bind %}
          nameserver {{ dns }}
          {% endfor %}
          search {{ domain }}

    - name: 0.4.1 | Перезапуск службы 'networking'
      service:
        name: networking
        state: restarted

  when:
    - nm_active.stdout == 'inactive' # NetworkManager не активен
    - ifupdown_exists.stat.exists    # networking есть
    - not eth_config_exists.stat.exists    # нет файла конфигурации
    # bonding не определен

 




# Выключение IPv6
- name: 0.4.1 | Чтение содержимого файла '/etc/sysctl.d/999-astra.conf'
  shell: cat /etc/sysctl.d/999-astra.conf | grep 'net.ipv6.conf.lo.disable_ipv6=0'
  register: disable_ipv6_status
  ignore_errors: yes

- name: 0.4.1 | Выключение IPv6
  block:

  - name: 0.4.1 | Изменения файла '/etc/default/grub'
    shell: |
      cat /etc/default/grub | grep GRUB_CMDLINE_LINUX_DEFAULT | grep ipv6.disable=0
      if [ $? != 0 ]; then
      sed -i "s/parsec.max_ilev=63/parsec.max_ilev=63 ipv6.disable=0/g" /etc/default/grub
      fi

  - name: 0.4.1 | Выключаем 'ipv6'
    sysctl:
      name: net.ipv6.conf.all.disable_ipv6
      value: 1
      sysctl_file: /etc/sysctl.d/999-astra.conf
      reload: true

  - name: 0.4.1 | Выключаем 'ipv6'
    sysctl:
      name: net.ipv6.conf.lo.disable_ipv6
      value: 0
      sysctl_file: /etc/sysctl.d/999-astra.conf
      reload: true

  - name: 0.4.1 | Обновление GRUB
    shell:  update-grub
    ignore_errors: yes
         
  when: disable_ipv6_status.stdout == ''

...