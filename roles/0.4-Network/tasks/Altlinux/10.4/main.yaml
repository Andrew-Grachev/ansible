---

- name: 0.4.1 | Проверка 'NetworkManager'
  command: systemctl is-active NetworkManager
  ignore_errors: yes
  register: nm_active

- name: 0.4.1 | Проверка 'net'
  stat:
    path: /etc/net/sysctl.conf
  register: ifupdown_exists

- name: 0.4.1 | Получить имя активного интерфейса
  shell: |
    ip -o -4 addr show | grep "{{ hostvars[inventory_hostname].ansible_ssh_host }}" | awk '{print $2}'  
  register: device_name

# Создание интерфейсов в 'Network'
- name: 0.4.1 | Конфигурирование активного интерфейса
  block:

  - name: Чтение DNS серверов в файле '/etc/net/ifaces/{{ device_name.stdout }}/resolv.conf'
    shell: |
      cat /etc/net/ifaces/{{ device_name.stdout }}/resolv.conf | grep -E 'nameserver ({{ Net.bind | join('|') }})' | wc -l
    register: dns_check
    changed_when: false

  - name: 0.4.1 | Конфигурирование активного интерфейса
    block:

    - name: 0.4.1 | Создание файла '/etc/net/ifaces/{{ device_name.stdout }}/resolv.conf'
      copy:
        dest: '/etc/net/ifaces/{{ device_name.stdout }}/resolv.conf'
        content: |
          {% for dns in Net.bind %}
          nameserver {{ dns }}
          {% endfor %}
          search {{ domain }}

    - name: 0.4.1 | Создание файла '/etc/net/ifaces/{{ device_name.stdout }}/ipv4route'
      copy:
        dest: '/etc/net/ifaces/{{ device_name.stdout }}/ipv4route'
        content: |
          default via {{ Net.gateway }}

    - name: 0.4.1 | Перезапуск службы 'network'
      service:
        name: network
        state: restarted

    when:
      - dns_check.stdout | int != Net.bind | length # DNS сервера другие

  when:
    - nm_active.stdout == 'inactive' # NetworkManager не активен
    - ifupdown_exists.stat.exists    # networking есть
    # bonding не определен

# Создание интерфейсов в 'NetworkManager'
- name: 0.4.1 | Конфигурирование активного интерфейса
  block:

  - name: Чтение DNS серверов в файле '/etc/NetworkManager/conf.d/dns.conf'
    shell: cat /etc/NetworkManager/conf.d/dns.conf | grep '{{ Net.bind | join(',') }}'
    register: dns_status
    ignore_errors: yes

  - name: Настройка 'dns.conf'
    block:

    - name: Останавливаем  службу 'firewalld' 
      service:
        name: firewalld
        state: stopped
        enabled: false
      ignore_errors: yes

    - name: Создаем конфигурацию '/etc/NetworkManager/conf.d/dns.conf'
      shell: |
        echo -e "[global-dns-domain-*]\nservers = {{ Net.bind | join(',') }}\n" > /etc/NetworkManager/conf.d/dns.conf
        rm -f /etc/resolv.conf

    - name: Перезапуск службы 'NetworkManager'
      service:
        name: NetworkManager
        state: restarted

    when:
      - dns_status.stdout == ''

  - name: Чтение конфигурации интерфейса
    shell: nmcli device show | grep '{{ domain }}'
    register: domain_status
    ignore_errors: yes

  - name: Создание первого интерфейса если ..............................
    block:

    - name: Получить имя активного интерфейса
      shell: |
        ip -o -4 addr show | grep "{{ hostvars[inventory_hostname].ansible_ssh_host }}" | awk '{print $2}'  
      register: device_name

    - name: Настройка сетевого интерфейса
      nmcli:
        type: ethernet
        conn_name: '{{ device_name.stdout }}'
        ip4: '{{ hostvars[inventory_hostname].ansible_ssh_host }}/{{ Net.network.split("/")[1] }}'
        gw4: '{{ Net.gateway }}'
        dns4 : '{{ Net.bind | join(",") }}'
        dns4_search: '{{ domain }}'
        state: present

    - name: Настройка сетевого интерфейса
      shell: |
        nmcli connection modify "{{ device_name.stdout }}" ipv6.method  disabled

    - name: Проверяем, содержит ли список маршрутов IP хоста
      set_fact:
        ip_found: "{{ Net.routes | select('search', hostvars[inventory_hostname].ansible_ssh_host) | list | length > 0 }}"

    - name: Добавление маршрутов сетевого интерфейса
      shell: |
        nmcli connection modify "{{ device_name.stdout }}" ipv4.routes "{{ Net.routes | join(',') }}"
      when: 
        - Net.routes is defined
        - not ip_found

    - name: Перезапуск службы 'NetworkManager'
      service:
        name: NetworkManager
        state: restarted

    - name: Получить имя неактивного интерфейса
      shell: |
        nmcli con | grep 'ethernet  --' | awk '{print $1}' 
      register: device_off

    - name: Удаление неактивного интерфейса
      shell: |
        rm -f /etc/NetworkManager/system-connections/{{ device_off.stdout }}*
      when: device_off.stdout != ''

    when:
      - domain_status.stdout == ''

  when:
    - nm_active.stdout == 'active' # NetworkManager не активен
    # bonding не определен



# - name: Получить список сетевых интерфейсов
  # shell: |
    # ip link show | grep BROADCAST | grep ens | awk '{print $2}' | sed 's/.$//'
  # register: device_list

# - name: Создание массива сетевых интерфейсов
  # set_fact:
    # interfaces: "{{ device_list.stdout_lines | list }}"

# - name: Получение количества элементов в списке интерфейсов
  # set_fact:
    # interfaces_length: "{{ interfaces | length }}"

# - name: Чтение содержимого файла '/etc/net/ifaces/{{ interfaces[0] }}/resolv.conf'
  # shell: cat /etc/net/ifaces/{{ interfaces[0] }}/resolv.conf | grep '{{ net.bind }}'
  # register: resolv_status
  # ignore_errors: yes

# - name: Чтение содержимого файла '/etc/resolv.conf'
  # shell: cat /etc/net/ifaces/{{ interfaces[0] }}/resolv.conf | grep '{{ hostvars[FreeIPA.srv].ansible_ssh_host }}'
  # register: resolv_2_status
  # ignore_errors: yes

# - name: Создание одиночного интерфейса если количество интерфейсов однин
  # block:

  # - name: Создание папки '/etc/net/ifaces/{{ interfaces[0] }}'
    # file:
      # state: directory
      # path: '/etc/net/ifaces/{{ interfaces[0] }}'

  # - name: Копирование файла '/etc/net/ifaces/{{ interfaces[0] }}/options'
    # template:
      # src: '{{ ansible_distribution }}/options_no.j2'
      # dest: '/etc/net/ifaces/{{ interfaces[0] }}/options'

  # - name: Копирование файла '/etc/net/ifaces/{{ interfaces[0] }}/ipv4address'
    # template:
      # src: '{{ ansible_distribution }}/ipv4address.j2'
      # dest: '/etc/net/ifaces/{{ interfaces[0] }}/ipv4address'

  # - name: Копирование файла '/etc/net/ifaces/{{ interfaces[0] }}/ipv4route'
    # template:
      # src: '{{ ansible_distribution }}/ipv4route.j2'
      # dest: '/etc/net/ifaces/{{ interfaces[0] }}/ipv4route'

  # - name: Копирование файла '/etc/net/ifaces/{{ interfaces[0] }}/resolv.conf'
    # template:
      # src: '{{ ansible_distribution }}/resolv.conf.j2'
      # dest: '/etc/net/ifaces/{{ interfaces[0] }}/resolv.conf'

  # - name: Перезагрузка ОС
    # reboot:
      # msg: 'Reboot'

  # when:
    # - interfaces_length == '1'
    # - resolv_status.stdout == '' or resolv_2_status.stdout == ''

# - name: Проверка наличия установленного 'bond0'
  # stat:
    # path: /etc/net/ifaces/bond0/options
  # register: bond0_result
  # ignore_errors: yes

# - name: Настройка сетевых интерфейсов если их боллее одного 
  # block:

  # - name: Создание папки '/etc/net/ifaces/ens__'
    # file:
      # state: directory
      # path: '/etc/net/ifaces/{{ item }}'
    # with_items: '{{ interfaces }}'

  # - name: Копирование файла '/etc/net/ifaces/ens__/options'
    # template:
      # src: '{{ ansible_distribution }}/options_no.j2'
      # dest: '/etc/net/ifaces/{{ item }}/options'
    # with_items: '{{ interfaces }}'

  # - name: Удаление файла '/etc/net/ifaces/ens__/ipv4address'
    # file:
      # path: '/etc/net/ifaces/{{ item }}/ipv4address'
      # state: absent
    # with_items: '{{ interfaces }}'

  # - name: Удаление файла '/etc/net/ifaces/ens__/ipv4route'
    # file:
      # path: '/etc/net/ifaces/{{ item }}/ipv4route'
      # state: absent
    # with_items: '{{ interfaces }}'

  # - name: Удаление файла '/etc/net/ifaces/ens__/resolv.conf'
    # file:
      # path: '/etc/net/ifaces/{{ item }}/resolv.conf'
      # state: absent
    # with_items: '{{ interfaces }}'

  # - name: Создание 'bond0'
    # block:

    # - name: Создание папки '/etc/net/ifaces/bond0'
      # file:
        # state: directory
        # path: '/etc/net/ifaces/bond0'

    # - name: Копирование файла '/etc/net/ifaces/bond0/options'
      # template:
        # src: '{{ ansible_distribution }}/bond_options.j2'
        # dest: '/etc/net/ifaces/bond0/options'

    # - name: Копирование файла '/etc/net/ifaces/bond0/ipv4address'
      # template:
        # src: '{{ ansible_distribution }}/ipv4address.j2'
        # dest: '/etc/net/ifaces/bond0/ipv4address'

    # - name: Копирование файла '/etc/net/ifaces/bond0/ipv4route'
      # template:
        # src: '{{ ansible_distribution }}/ipv4route.j2'
        # dest: '/etc/net/ifaces/bond0/ipv4route'

    # - name: Копирование файла '/etc/net/ifaces/bond0/resolv.conf'
      # template:
        # src: '{{ ansible_distribution }}/resolv.conf.j2'
        # dest: '/etc/net/ifaces/bond0/resolv.conf'

    # - name: Перезагрузка ОС
      # reboot:
        # msg: 'Reboot'

  # when:
    # - not bond0_result.stat.exists
    # - interfaces_length != '1'
    # - resolv_status.stdout == '' or resolv_2_status.stdout == ''

# - name: Чтение содержимого файла '/etc/resolv.conf'
  # shell: cat /etc/resolv.conf | grep '{{ net.bind }}'
  # register: resolv_status
  # ignore_errors: yes

# - name: Чтение содержимого файла '/etc/resolv.conf'
  # shell: cat /etc/resolv.conf | grep '{{ hostvars[freeipa.srv].ansible_ssh_host }}'
  # register: resolv_2_status
  # ignore_errors: yes

# - name: Копирование файла '/etc/resolv.conf'
  # template:
    # src: '{{ ansible_distribution }}/resolv.conf.j2'
    # dest: '/etc/resolv.conf' 
  # when: resolv_status.stdout == '' or resolv_2_status.stdout == ''

...