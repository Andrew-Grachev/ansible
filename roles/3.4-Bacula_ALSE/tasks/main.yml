---

- name: Проверка наличия установленного Backula сервер
  stat:
    path: /etc/bacula/common_default_passwords
  register: bacula_result

- name: Установка и настройка Backula сервер
  block:

  - name: Добавим группу 'bacula'
    group:
      name: bacula

  - name: Добавим пользователя 'bacula'
    user:
      name: bacula
      comment: bacula
      password: bacula
      group: bacula

  - name: Инсталляция необходимых пакетов
    apt:
      name:
      - postgresql
      - postgresql-se-test-9.6
      - bacula-common-pgsql
      - bacula-director-pgsql
      - bacula-console
      - bacula-console-qt
      - pgadmin3
      - bacula-bscan
      - bacula-fd
      update_cache: yes
      force: yes

  - name: Создадим папки для хранения резервных копий
    file:
      state: directory
      mode: '0755'
      recurse: yes
      owner: bacula
      group: bacula
      path: '{{ item }}'
    with_items:
      - '{{ bacula.store }}'
      - '{{ bacula.store }}/freeipa'
      - '{{ bacula.store }}/files'
      - '{{ bacula.store }}/db'

  - name: Внесение изменений в /etc/postgresql/9.6/main/pg_hba.conf
    shell: "{{ item }}"
    with_items:
      - "sed -i '/Bacula'/d /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i '/local   all/s/^/#/' /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i '/TYPE  DATABASE/i local	all		postgres				trust       # Настройки для Bacula' /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i '/0.0.0.0/s/^/#/' /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i '/# IPv4/i local	all		all					trust       # Настройки для Bacula' /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i '/# IPv6/i host	all		all		127.0.0.1/32		trust       # Настройки для Bacula' /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i '/# IPv6/i host	all		all		{{ hostvars[bacula.srv].ansible_ssh_host }}/24		trust       # Настройки для Bacula' /etc/postgresql/9.6/main/pg_hba.conf"
      - "sed -i 's/##/#/g' /etc/postgresql/9.6/main/pg_hba.conf"

  - name: Перезапустим PostgreSQL
    service:
      name: postgresql
      state: restarted

  - name: Создание и конфигурирование БД
    shell: "{{ item }}"
    with_items:
      - "sudo -u postgres psql template1 -c 'DROP DATABASE IF EXISTS bacula;'"
      - "sudo -u postgres psql template1 -c 'DROP ROLE IF EXISTS bacula;'"
      - "sudo -u postgres psql template1 -c 'CREATE ROLE bacula;'"
      - "sudo -u postgres psql template1 -c 'ALTER USER bacula WITH PASSWORD $$bacula$$;'"
      - "sudo -u postgres psql template1 -c 'ALTER USER bacula LOGIN SUPERUSER CREATEDB CREATEROLE;'"
      - "sudo -u postgres psql -c 'CREATE DATABASE bacula WITH ENCODING = $$SQL_ASCII$$ LC_COLLATE = $$C$$ LC_CTYPE = $$C$$ TEMPLATE = $$template0$$;'"
      - "sudo -u postgres psql -c 'ALTER DATABASE bacula OWNER TO bacula;'"
      - "sed -i 's/db_name=${db_name:-XXX_DBNAME_XXX}/db_name=bacula/' /usr/share/bacula-director/make_postgresql_tables"
      - "sed -i 's/psql -f - -d/psql -U bacula -h 127.0.0.1 -p 5432 -f - -d/' /usr/share/bacula-director/make_postgresql_tables"
      - "sed -i 's/db_user=${db_user:-XXX_DBUSER_XXX}/db_user=bacula/' /usr/share/bacula-director/grant_postgresql_privileges"
      - "sed -i 's/db_name=${db_name:-XXX_DBNAME_XXX}/db_name=bacula/' /usr/share/bacula-director/grant_postgresql_privileges"
      - "sed -i 's/db_password=XXX_DBPASSWORD_XXX/db_password=bacula/' /usr/share/bacula-director/grant_postgresql_privileges"
      - "sed -i 's/psql -f - -d/psql -U bacula -h 127.0.0.1 -p 5432 -f - -d/' /usr/share/bacula-director/grant_postgresql_privileges"
      - "sudo usermod -a -G shadow postgres"
      - "sudo setfacl -d -m u:postgres:r  /etc/parsec/macdb /etc/parsec/capdb"
      - "sudo setfacl -R -m u:postgres:r  /etc/parsec/macdb /etc/parsec/capdb"
      - "sudo setfacl    -m u:postgres:rx /etc/parsec/macdb /etc/parsec/capdb"
      - "sudo pdpl-user bacula -l 0:0"
      - "cd /usr/share/bacula-director && ./make_postgresql_tables"
      - "cd /usr/share/bacula-director && ./grant_postgresql_privileges"

  - name: Копирование конфигураций
    template: 
      src: "{{ item }}"
      dest: /etc/bacula
      mode: "u=rw,g=r,o=r"
      owner: "bacula"
      group: "bacula"
      force: yes
    with_items:
      - 'bacula-dir.conf'
      - 'bacula-fd.conf'
      - 'bacula-sd.conf'
      - 'bat.conf'
      - 'bconsole.conf'

  - name: Копирование паролей
    copy:
      src: common_default_passwords
      dest: /etc/bacula
      owner: "bacula"
      group: "bacula"
      mode: "u=rw,g=r,o=r"
      force: yes

  - name: Добавление клиентов для заданий бекапа
    blockinfile:
      dest: /etc/bacula/bacula-dir.conf
      marker: "# {mark} Client_{{ item }}"
      block: |
             Client {
               Name = Client_{{ item }}
               Address = {{ hostvars[item].ansible_ssh_host }}
               FDPort = 9102
               Catalog = MyCatalog
               Password = "a9obYqJMXLLmmgZpebAbSf_tqVs6TKSpa"
               File Retention = 60 days
               Job Retention = 6 months
               AutoPrune = yes
               }
    loop: "{{ bacula.clients.name }}"

  - name: Добавление заданий бекапа FreeIPA
    blockinfile:
      dest: /etc/bacula/bacula-dir.conf
      marker: "##### {mark} задания бекапа FreeIPA | Хост: {{ item }} #####"
      block: |
             FileSet {
               Name = "Fileset_{{ item }}_FreeIPA"
               Include {
                 Options {
                   signature = MD5
                   Compression = GZIP
                   recurse = yes
                   aclsupport = yes
                   xattrsupport = yes
                 }
               File = /var/lib/ipa/backup
               }
             }
             #
             Job {
               Name = "Backup_FreeIPA_{{ item }}_Daily_Full"
               Type = Backup
               Level = Full
               Storage = "Storage FreeIPA"
               FileSet = "Fileset_{{ item }}_FreeIPA"
               Schedule = "Schedule FreeIPA Full"
               Pool = "Pool_FreeIPA_Full"
               Client = "Client_{{ item }}"
               Write Bootstrap = "/var/lib/bacula/%n.bsr"
               Messages = Standard
               ClientRunBeforeJob = "/bin/sh /etc/bacula/backup-freeipa.sh"
               Priority = 11
             }
             #
             # Job {
               # Name = "Restore_FreeIPA_{{ item }}"
               # Type = Restore
               # Level = Full
               # Storage = "Storage FreeIPA"
               # FileSet = "Fileset_{{ item }}_FreeIPA"
               # Pool = "Pool_FreeIPA_Full"
               # Client = "Client_{{ item }}"
               # Messages = Standard
               # Where = /var/lib/ipa/backup
               # ClientRunAfterJob = "/bin/sh /etc/bacula/restore-freeipa.sh"
             # }
      mode: "u=rw,g=r,o=r"
      owner: "bacula"
      group: "bacula"
    loop: "{{ bacula.freeipa | list }}"  

  - name: Добавление заданий бекапа PostgreSQL
    blockinfile:
      dest: /etc/bacula/bacula-dir.conf
      marker: "##### {mark} задания бекапа PostgreSQL | Хост: {{ item.0 }} | База:{{ item.1 }} #####"
      block: |
             FileSet {
               Name = "Fileset_{{ item.0 }}_{{ item.1 }}"
               Include {
                 Options {
                   signature = MD5
                   Compression = GZIP
                   recurse = yes
                   aclsupport = yes
                   xattrsupport = yes
                 }
               File = /var/lib/postgresql/9.6/main/pd_dump/{{ item.1 }}
               }
             }
             #
             Job {
               Name = "Backup_DB_{{ item.0 }}_{{ item.1}}_Daily_Full"
               Type = Backup
               Level = Full
               Storage = "Storage DB"
               FileSet = "Fileset_{{ item.0 }}_{{ item.1 }}"
               Schedule = "Schedule Postgresql Full"
               Pool = "Pool_Postgresql_Full"
               Client = "Client_{{ item.0 }}"
               Write Bootstrap = "/var/lib/bacula/%n.bsr"
               Messages = Standard
               ClientRunBeforeJob = "/bin/sh /etc/bacula/backup-postgresql-{{ item.1}}.sh"
               Priority = 11
             }
             #
             # Job {
               # Name = "Restore_DB_{{ item.0 }}_{{ item.1}}"
               # Type = Restore
               # Level = Full
               # Storage = "Storage DB"
               # FileSet = "Fileset_{{ item.0 }}_{{ item.1 }}"
               # Pool = "Pool_Postgresql_Full"
               # Client = "Client_{{ item.0 }}"
               # Messages = Standard
               # Where = /var/lib/postgresql/9.6/main/pd_restore/{{ item.1 }}
               # ClientRunAfterJob = "/bin/sh /etc/bacula/restore-postgresql-{{ item.1}}.sh"
             # }
      mode: "u=rw,g=r,o=r"
      owner: "bacula"
      group: "bacula"
    loop: "{{ bacula.postgresql | list }}"  

  - name: Добавление заданий бекапа папок
    blockinfile:
      dest: /etc/bacula/bacula-dir.conf
      marker: "##### {mark} задания бекапа папок | Хост: {{ item.0 }} #####"
      block: |
             FileSet {
               Name = "Fileset_{{ item.0 }}"
               Include {
                 Options {
                   signature = MD5
                   Compression = GZIP
                   recurse = yes
                   aclsupport = yes
                   xattrsupport = yes
                 }
                 File = {{ item.1 | replace(';', '&&&&&    File = ') }}
               }
             }
             #
             Job {
               Name = "Backup_Files_{{ item.0 }}_Daily_Incremental"
               Type = Backup
               Level = Incremental
               Storage = "Storage Files"
               FileSet = "Fileset_{{ item.0 }}"
               Schedule = "Schedule Servers"
               Pool = "Pool_Files_Incremental"
               Client = "Client_{{ item.0 }}"
               Write Bootstrap = "/var/lib/bacula/%n.bsr"
               Messages = Standard
               Priority = 11
             }
             #
             Job {
               Name = "Backup_Files_{{ item.0 }}_Weekly_Full"
               Type = Backup
               Level = Full
               Storage = "Storage Files"
               FileSet = "Fileset_{{ item.0 }}"
               Schedule = "Schedule Servers"
               Pool = "Pool_Files_Full"
               Client = "Client_{{ item.0 }}"
               Write Bootstrap = "/var/lib/bacula/%n.bsr"
               Messages = Standard
               Priority = 11
             }
             #
             # Job {
               # Name = "Restore_Files_{{ item.0 }}_Incremental"
               # Type = Restore
               # Storage = "Storage Files"
               # FileSet = "Fileset_{{ item.0 }}"
               # Pool = "Pool_Files_Incremental"
               # Client = "Client_{{ item.0 }}"
               # Where = /tmp
               # Messages = Standard
             # }
             #
             # Job {
               # Name = "Restore_Files_{{ item.0 }}_Full"
               # Type = Restore
               # Storage = "Storage Files"
               # FileSet = "Fileset_{{ item.0 }}"
               # Pool = "Pool_Files_Full"
               # Client = "Client_{{ item.0 }}"
               # Where = /tmp
               # Messages = Standard
             # }             
    loop: "{{ bacula.files | list }}"

  - name: Инсталляция необходимых пакетов (без уже готового правильного конфига вываливается в ошибку)
    apt:
      name:
      - bacula-director
      update_cache: yes
      force: yes

  - name: Включим службы и перезапустим службы
    service:
      name: "{{ item }}"
      state: restarted
      enabled: yes
    with_items:
      - bacula-director
      - bacula-sd
      - bacula-fd
      
  - name: Добавление пользователя '{{ ansible_ssh_user }}' в группу 'bacula'
    user:
      name: '{{ ansible_ssh_user }}'
      groups: 'bacula'
      append: yes 
      
  when:
  - not bacula_result.stat.exists   
  - inventory_hostname == bacula.srv

- name: Установка и настройка Backula-клиентов
  block:

  - name: Добавим группу 'bacula'
    group:
      name: bacula

  - name: Добавим пользователя 'bacula'
    user:
      name: bacula
      comment: bacula
      password: bacula
      group: bacula

  - name: Инсталляция необходимых пакетов
    apt:
      name:
      - bacula-fd
      state: latest
      update_cache: yes
      
  - name: Копирование скриптов для создания дампа 'FreeIPA'
    template: 
      src: 'backup-freeipa.j2'
      dest: /etc/bacula/backup-freeipa.sh
      mode: "u=rwx,g=rx,o=rx"
      owner: "bacula"
      group: "bacula"
      force: yes
    loop: "{{ bacula.freeipa }}"  
    when: item == '{{ inventory_hostname }}'

  - name: Копирование скриптов для восстановления дампа 'FreeIPA'
    template: 
      src: 'restore-freeipa.j2'
      dest: /etc/bacula/restore-freeipa.sh
      mode: "u=rwx,g=rx,o=rx"
      owner: "bacula"
      group: "bacula"
      force: yes
    loop: "{{ bacula.freeipa | list }}"  
    when: item == '{{ inventory_hostname }}'      

  - name: Копирование скриптов для создания дампа 'PostgreSQL'
    template: 
      src: 'backup-postgresql.j2'
      dest: /etc/bacula/backup-postgresql-{{ item.1 }}.sh
      mode: "u=rwx,g=rx,o=rx"
      owner: "bacula"
      group: "bacula"
      force: yes
    loop: "{{ bacula.postgresql | list }}"  
    when: item.0 == '{{ inventory_hostname }}'

  - name: Копирование скриптов для восстановления дампа 'PostgreSQL'
    template: 
      src: 'restore-postgresql.j2'
      dest: /etc/bacula/restore-postgresql-{{ item.1 }}.sh
      mode: "u=rwx,g=rx,o=rx"
      owner: "bacula"
      group: "bacula"
      force: yes
    loop: "{{ bacula.postgresql | list }}"  
    when: item.0 == '{{ inventory_hostname }}'

  - name: Создание конфигурации клиента
    template:
      src: "bacula-fd.conf"
      dest: "/etc/bacula/bacula-fd.conf"
      owner: "bacula"
      group: "bacula"
      mode: "u=rw,g=r,o="
      force: yes

  - name: Копирование файла паролей
    copy:
      src: "common_default_passwords"
      dest: "/etc/bacula/common_default_passwords"
      owner: "bacula"
      group: "bacula"
      mode: "u=rw,g=r,o="
      force: yes

  - name: Включаем и перезапускаем службу 'bacula-fd'
    service:
      name: bacula-fd
      enabled: yes
      state: restarted

  when:
  - not bacula_result.stat.exists   






- name: Объединение списков
  set_fact:
    combined_list: "{{ bacula.files.0 }}"


- name: Вывод результатов
  debug:
    var: combined_list



...